<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックスBehaviorの終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="myThings Trigger HTTP" id="5" localization="8" tooltip="This is a sample box to get records from kintone." x="125" y="193">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import urllib2

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        pass

    def onUnload(self):
        pass

    def onInput_onStart(self):
        try:
            uuid = self.getParameter("UUID").strip()
            token = self.getParameter("TOKEN").strip()
            url = 'http://%s/data/%s/' % (self.getParameter("IDCF_CHANNEL_URL").strip(), uuid)
            headers = {
                 "meshblu_auth_uuid" : uuid,
                 "meshblu_auth_token" : token}

            request = urllib2.Request(url,"dummy",headers)
            response = urllib2.urlopen(request)
            responseText = response.read()
            self.logger.info("myThing Trigger finished!!")
            self.onStopped()

        except urllib2.URLError, message:
            self.logger.info("exception:" + str(message))
            self.onFailed(message)

    def onInput_onStop(self):
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Output name="onFailed" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                            <Parameter name="IDCF_CHANNEL_URL" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="6" />
                            <Parameter name="UUID" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                            <Parameter name="TOKEN" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                        </Box>
                        <Box name="IDCF MQTT_SUB" id="1" localization="8" tooltip="This is a sample script to add record in kintone." x="134" y="442">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import json
import sys

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

        self.mqttc = None
        self.topic = None
        self.run = False

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")
        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), "../lib")
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

    def onUnload(self):

        if self.run == True and self.mqttc != None and self.topic != None :
            self.logger.info("mqtt client unsubscribing..")
            self.mqttc.unsubscribe(self.topic)
            self.logger.info("mqtt client disconnecting..")
            self.mqttc.disconnect()

        self.run = False
        self.mqttc = None

        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None


    def onInput_onStart(self):
        import paho.mqtt.client as mqtt

        if self.run == True:
            self.logger.info("IDCF MQTT_SUB already running..")
            return

        self.run = True

        uuid = self.getParameter("UUID").strip()
        token = self.getParameter("TOKEN").strip()

        self.host       = self.getParameter("IDCF_CHANNEL_URL").strip()
        self.port       = 1883
        self.topic      = self.getParameter("UUID").strip()

        self.mqttc = mqtt.Client(client_id='', clean_session=True, protocol=mqtt.MQTTv311)

        self.mqttc.username_pw_set(uuid, token)
        self.mqttc.on_message = self.handleMessage
        self.mqttc.connect(self.host, self.port, keepalive=60)
        self.mqttc.subscribe(self.topic)

        self.logger.info("mqtt client ready..")
        self.mqttc.loop_forever()
        #while self.run:
        #    self.mqttc.loop()
        #    self.logger.info("reading..")
        self.logger.info("myThings action ending..")
        self.onStopped()

    def handleMessage(self, mqttc, obj, msg):
        r = json.loads(str(msg.payload))
        self.onMessage(r["data"]["payload"].encode("utf-8"))
        #self.logger.info("topic: " + msg.topic + ", payload: " + str(msg.payload) + ", qos: " + str(msg.qos) + ", retain: " + str(msg.retain))

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Output name="onMessage" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Parameter name="IDCF_CHANNEL_URL" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="6" />
                            <Parameter name="UUID" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                            <Parameter name="TOKEN" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                        </Box>
                        <Box name="Log_MQTT" id="7" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="276" y="441">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="IDCF_MQTT_SUB" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Box name="myThings Action HTTP" id="12" localization="8" tooltip="This is a sample box to get records from kintone." x="127" y="67">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import urllib2
#import threading
import socket
import json
import time

class MyThingsAction_HTTP(object):
    def __init__(self,caller, host):
        self.host = host
        self.port = 80
        self.caller = caller
        self.buffer = ""
        self.sock = None
        self.running = False

    def _readLine(self, separator = "\r\n"):
        line = ""
        status = True
        while True:
            i = self.buffer.find(separator)
            if i >= 0:
                line = self.buffer[:i]
                self.buffer = self.buffer[i+2:]
                break

            data = self.sock.recv(1024)
            if not data:
                status = False
                break

            self.buffer += data

        return line, status


    def subscribe(self, uuid, token):

        self.running = True
        status = True

        while self.running:
            try:
                self.sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
                self.caller.logger.info("myThings Action opening..")

                path = '/subscribe/%s' % (uuid)
                self.sock.connect((self.host,self.port))
                self.sock.send("GET %s HTTP/1.0\r\n" % path)
                self.sock.send("meshblu_auth_uuid: %s\r\n" % uuid)
                self.sock.send("meshblu_auth_token: %s\r\n\r\n" % token)
                self.buffer = ""
                #check response
                line, status = self._readLine()
                if not status:
                    self.caller.logger.error("connection failed!")
                elif line.find(" 200 ") < 0:
                    if line.find(" 504 ") > 0 : #timeout
                        self.caller.logger.info("timeout.. reconnecting..")
                        self.sock.close()
                        time.sleep(3)
                        continue

                    self.caller.logger.error("HTTP error : " + line)
                    status = False

                while status and self.running:
                    line, status = self._readLine()
                    if len(line) == 0:
                        break

                if not status:
                    self.caller.logger.error("read error")

                #read data
                body = ""
                while status and self.running:
                    line, status = self._readLine("\n")
                    if not status:
                        break

                    if self.running:
                        payload = json.loads(line)["payload"]
                        self.caller.onMessage(str(payload.encode("utf-8")))

                self.caller.logger.info("myThings Action closing..")
                self.sock.close()

            except urllib2.URLError, message:
                status = False
                self.logger.info("exception:" + str(message))
                self.onFailed(message)

    def unsubscribe(self):
        self.running = False
        if self.sock != None:
            self.sock.close()


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.running = False

    def onLoad(self):
        host = self.getParameter("IDCF_CHANNEL_URL").strip()
        self.action = MyThingsAction_HTTP(self,host)

    def onUnload(self):
        self.action.unsubscribe()
        self.running = False

    def onInput_onStart(self):
        if self.running:
            self.logger.info("already running")
            return

        uuid = self.getParameter("UUID").strip()
        token = self.getParameter("TOKEN").strip()

        self.running = True
        self.action.subscribe(uuid, token)
        #t = threading.Thread(target=c.connect, args=(uuid, token))
        #t.start()

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                            <Output name="onMessage" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Output name="onFailed" type="3" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                            <Parameter name="IDCF_CHANNEL_URL" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                            <Parameter name="UUID" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                            <Parameter name="TOKEN" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="9" />
                        </Box>
                        <Box name="Log_HTTP" id="13" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="285" y="24">
                            <bitmap>media/images/box/print.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="myThings Action HTTP" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                            <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                <Choice value="Fatal" />
                                <Choice value="Error" />
                                <Choice value="Warning" />
                                <Choice value="Info" />
                                <Choice value="Debug" />
                            </Parameter>
                        </Box>
                        <Box name="Say Text" id="14" localization="8" tooltip="Say the text received on its input." x="290" y="138">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="IDCF MQTT_PUB" id="16" localization="8" tooltip="This is a sample script to add record in kintone." x="130" y="322">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import sys

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")
        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), "../lib")
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

    def onUnload(self):

        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None

    def onInput_onStart(self, payload):
        import paho.mqtt.client as mqttc
        import paho.mqtt.publish as publish

        uuid       = self.getParameter("UUID").strip()
        token      = self.getParameter("TOKEN").strip()
        device     = self.getParameter("DEVICE").strip()

        host       = self.getParameter("IDCF_CHANNEL_URL").strip()
        port       = 1883
        topic      = "message"
        message    = json.dumps({"devices": device, "payload": payload})

        publish.single(topic=topic, payload=message, hostname=host, port=port,
            auth={'username':uuid, 'password':token}, protocol=mqttc.MQTTv311)

        self.onStopped()

    def onInput_onStop(self):
        self.onUnload()
        self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Parameter name="IDCF_CHANNEL_URL" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="5" />
                            <Parameter name="UUID" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="6" />
                            <Parameter name="TOKEN" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="7" />
                            <Parameter name="DEVICE" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" />
                        </Box>
                        <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="5" />
                        <Link inputowner="13" indexofinput="2" outputowner="12" indexofoutput="5" />
                        <Link inputowner="14" indexofinput="2" outputowner="12" indexofoutput="5" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
